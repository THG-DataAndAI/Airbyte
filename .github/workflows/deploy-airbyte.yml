name: Deploy Airbyte on GKE

on:
  workflow_dispatch:
    inputs:
      cluster_name:
        description: 'GKE Cluster Name'
        required: true
        default: 'airbyte-cluster'
      region:
        description: 'GCP Region'
        required: true
        default: 'europe-west2-a'
      domain:
        description: 'Domain for external access (e.g., airbyte.yourdomain.com)'
        required: true
      destroy:
        description: 'Destroy infrastructure'
        required: false
        default: 'false'

env:
  PROJECT_ID: thg-dev-icehouse
  GKE_CLUSTER: ${{ github.event.inputs.cluster_name }}
  GKE_ZONE: ${{ github.event.inputs.region }}
  DOMAIN: ${{ github.event.inputs.domain }}

jobs:
  debug-inputs:
    name: Debug Workflow Inputs
    runs-on: self-hosted
    steps:
    - name: Display inputs
      run: |
        echo "=== Workflow Inputs ==="
        echo "Cluster Name: ${{ github.event.inputs.cluster_name }}"
        echo "Region: ${{ github.event.inputs.region }}"
        echo "Domain: ${{ github.event.inputs.domain }}"
        echo "Destroy: ${{ github.event.inputs.destroy }}"
        echo "Destroy != 'true': ${{ github.event.inputs.destroy != 'true' }}"
        echo "========================"

  setup-infrastructure:
    name: Setup GKE Infrastructure
    runs-on: self-hosted
    if: ${{ !contains(github.event.inputs.destroy, 'true') }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: thg-dev-icehouse

    - name: Configure Docker to use gcloud as credential helper
      run: |-
        gcloud --quiet auth configure-docker

    - name: Enable required APIs
      run: |-
        gcloud services enable container.googleapis.com
        gcloud services enable compute.googleapis.com
        gcloud services enable dns.googleapis.com
        gcloud services enable certificatemanager.googleapis.com

    - name: Create GKE cluster
      run: |-
        gcloud container clusters create $GKE_CLUSTER \
          --zone $GKE_ZONE \
          --num-nodes 3 \
          --machine-type e2-standard-4 \
          --disk-size 50GB \
          --disk-type pd-ssd \
          --enable-autorepair \
          --enable-autoupgrade \
          --enable-autoscaling \
          --min-nodes 1 \
          --max-nodes 5 \
          --enable-network-policy \
          --addons HorizontalPodAutoscaling,HttpLoadBalancing,GcePersistentDiskCsiDriver

    - name: Get GKE credentials
      run: |-
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE

    - name: Create static IP address
      run: |-
        gcloud compute addresses create airbyte-ip --global || true

    - name: Get static IP
      id: get_ip
      run: |-
        IP=$(gcloud compute addresses describe airbyte-ip --global --format="value(address)")
        echo "static_ip=$IP" >> $GITHUB_OUTPUT
        echo "Static IP: $IP"

    outputs:
      static_ip: ${{ steps.get_ip.outputs.static_ip }}

  setup-dns:
    name: Setup DNS
    runs-on: self-hosted
    needs: setup-infrastructure
    if: ${{ !contains(github.event.inputs.destroy, 'true') }}
    
    steps:
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: thg-dev-icehouse

    - name: Create DNS zone (if needed)
      run: |-
        ZONE_NAME=$(echo $DOMAIN | sed 's/\./-/g')
        ROOT_DOMAIN=$(echo $DOMAIN | sed 's/^[^.]*\.//')
        gcloud dns managed-zones create $ZONE_NAME \
          --description="Zone for $ROOT_DOMAIN" \
          --dns-name=$ROOT_DOMAIN. || true

    - name: Create DNS A record
      run: |-
        ZONE_NAME=$(echo $DOMAIN | sed 's/^[^.]*\.//' | sed 's/\./-/g')
        gcloud dns record-sets transaction start --zone=$ZONE_NAME || true
        gcloud dns record-sets transaction add ${{ needs.setup-infrastructure.outputs.static_ip }} \
          --name=$DOMAIN. \
          --ttl=300 \
          --type=A \
          --zone=$ZONE_NAME || true
        gcloud dns record-sets transaction execute --zone=$ZONE_NAME || true

  deploy-postgres:
    name: Deploy PostgreSQL
    runs-on: self-hosted
    needs: setup-infrastructure
    if: ${{ !contains(github.event.inputs.destroy, 'true') }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: thg-dev-icehouse

    - name: Get GKE credentials
      run: |-
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE

    - name: Create namespace
      run: |-
        kubectl create namespace airbyte || true

    - name: Create PostgreSQL secret
      run: |-
        kubectl create secret generic postgres-secret \
          --from-literal=postgres-password=$(openssl rand -base64 32) \
          --namespace=airbyte || true

    - name: Deploy PostgreSQL
      run: |-
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: postgres-pvc
          namespace: airbyte
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 20Gi
          storageClassName: standard-rwo
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: postgres
          namespace: airbyte
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: postgres
          template:
            metadata:
              labels:
                app: postgres
            spec:
              containers:
              - name: postgres
                image: postgres:13
                ports:
                - containerPort: 5432
                env:
                - name: POSTGRES_DB
                  value: airbyte
                - name: POSTGRES_USER
                  value: airbyte
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: postgres-secret
                      key: postgres-password
                - name: PGDATA
                  value: /var/lib/postgresql/data/pgdata
                volumeMounts:
                - name: postgres-storage
                  mountPath: /var/lib/postgresql/data
                resources:
                  requests:
                    memory: "512Mi"
                    cpu: "250m"
                  limits:
                    memory: "1Gi"
                    cpu: "500m"
              volumes:
              - name: postgres-storage
                persistentVolumeClaim:
                  claimName: postgres-pvc
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: postgres-service
          namespace: airbyte
        spec:
          selector:
            app: postgres
          ports:
          - port: 5432
            targetPort: 5432
          type: ClusterIP
        EOF

  deploy-airbyte:
    name: Deploy Airbyte
    runs-on: self-hosted
    needs: [setup-infrastructure, deploy-postgres]
    if: ${{ !contains(github.event.inputs.destroy, 'true') }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: thg-dev-icehouse

    - name: Get GKE credentials
      run: |-
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE

    - name: Add Airbyte Helm repository
      run: |-
        helm repo add airbyte https://airbytehq.github.io/helm-charts
        helm repo update

    - name: Get PostgreSQL password
      id: get_pg_password
      run: |-
        PG_PASSWORD=$(kubectl get secret postgres-secret -n airbyte -o jsonpath="{.data.postgres-password}" | base64 --decode)
        echo "::add-mask::$PG_PASSWORD"
        echo "pg_password=$PG_PASSWORD" >> $GITHUB_OUTPUT

    - name: Update Airbyte values with domain
      run: |-
        sed -i "s/DOMAIN_PLACEHOLDER/$DOMAIN/g" helm/airbyte-values.yaml

    - name: Create database secret
      run: |-
        kubectl create secret generic airbyte-db-secret \
          --from-literal=password="${{ steps.get_pg_password.outputs.pg_password }}" \
          --namespace=airbyte || true

    - name: Create SSL certificate
      run: |-
        cat <<EOF | kubectl apply -f -
        apiVersion: networking.gke.io/v1
        kind: ManagedCertificate
        metadata:
          name: airbyte-ssl-cert
          namespace: airbyte
        spec:
          domains:
            - $DOMAIN
        EOF

    - name: Install Airbyte
      run: |-
        helm upgrade --install airbyte airbyte/airbyte \
          --namespace airbyte \
          --values helm/airbyte-values.yaml \
          --timeout 10m \
          --wait

    - name: Wait for certificate provisioning
      run: |-
        echo "Waiting for SSL certificate to be provisioned..."
        timeout 600 bash -c 'until kubectl get managedcertificate airbyte-ssl-cert -n airbyte -o jsonpath="{.status.certificateStatus}" | grep -q "Active"; do echo "Certificate status: $(kubectl get managedcertificate airbyte-ssl-cert -n airbyte -o jsonpath="{.status.certificateStatus}")"; sleep 30; done' || true

    - name: Get service information
      run: |-
        echo "=== Airbyte Deployment Status ==="
        kubectl get pods -n airbyte
        echo ""
        echo "=== Ingress Information ==="
        kubectl get ingress -n airbyte
        echo ""
        echo "=== Certificate Status ==="
        kubectl get managedcertificate -n airbyte
        echo ""
        echo "=== Access Information ==="
        echo "Airbyte will be available at: https://$DOMAIN"
        echo "Static IP: ${{ needs.setup-infrastructure.outputs.static_ip }}"
        echo ""
        echo "Note: SSL certificate provisioning may take 10-60 minutes."
        echo "You can check the status with:"
        echo "kubectl get managedcertificate airbyte-ssl-cert -n airbyte"

  cleanup:
    name: Cleanup Infrastructure
    runs-on: self-hosted
    if: ${{ contains(github.event.inputs.destroy, 'true') }}
    
    steps:
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Delete GKE cluster
      run: |-
        gcloud container clusters delete $GKE_CLUSTER --zone $GKE_ZONE --quiet || true

    - name: Delete static IP
      run: |-
        gcloud compute addresses delete airbyte-ip --global --quiet || true

    - name: Delete DNS records (manual step required)
      run: |-
        echo "Please manually remove DNS records for $DOMAIN if no longer needed"
        echo "Run: gcloud dns record-sets list --zone=<your-zone-name>"
