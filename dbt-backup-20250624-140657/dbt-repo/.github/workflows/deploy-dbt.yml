name: Deploy dbt to GKE

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Deployment action'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - teardown
          - run-transformations
      cluster_name:
        description: 'GKE cluster name (should match Airbyte cluster)'
        required: false
        default: 'airbyte-cluster'

env:
  PROJECT_ID: thg-dev-icehouse
  REGION: europe-west2
  ZONE: europe-west2-a
  CLUSTER_NAME: ${{ github.event.inputs.cluster_name }}
  NAMESPACE: dbt

jobs:
  deploy:
    runs-on: self-hosted
    environment: dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure kubectl
      run: |
        # Ensure the auth plugin is being used
        export USE_GKE_GCLOUD_AUTH_PLUGIN=True
        
        # Get cluster credentials
        echo "Configuring kubectl for cluster ${{ env.CLUSTER_NAME }}..."
        gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
          --region=${{ env.REGION }} \
          --project=${{ env.PROJECT_ID }}
        
        # Verify kubectl configuration
        echo "Verifying kubectl configuration..."
        kubectl config current-context
        kubectl cluster-info || echo "Warning: Could not get cluster info"

    - name: Deploy dbt
      if: github.event.inputs.action == 'deploy'
      run: |
        echo "Deploying dbt for Airbyte transformations..."
        
        # Create namespace
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        # Create database secret
        echo "Creating database secret..."
        kubectl create secret generic dbt-postgres-secret \
          --namespace=${{ env.NAMESPACE }} \
          --from-literal=password=${{ secrets.AIRBYTE_DB_PASSWORD }} \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Apply ConfigMaps
        echo "Applying ConfigMaps..."
        kubectl apply -f k8s/configmap.yaml
        
        # Apply CronJob and NetworkPolicy
        echo "Applying CronJob..."
        kubectl apply -f k8s/cronjob.yaml
        
        # Show deployment status
        echo "Deployment status:"
        kubectl get all -n ${{ env.NAMESPACE }}
        
        echo "=========================================="
        echo "dbt deployment completed successfully!"
        echo "=========================================="
        echo "Namespace: ${{ env.NAMESPACE }}"
        echo "Schedule: Every 4 hours"
        echo ""
        echo "To run transformations manually:"
        echo "  Use the 'run-transformations' action in this workflow"
        echo "=========================================="

    - name: Run dbt transformations
      if: github.event.inputs.action == 'run-transformations'
      run: |
        echo "Running dbt transformations manually..."
        
        # Generate unique job name
        JOB_NAME="dbt-manual-$(date +%s)"
        
        # Create job from cronjob
        kubectl create job --from=cronjob/dbt-transformations $JOB_NAME -n ${{ env.NAMESPACE }}
        
        echo "Job $JOB_NAME created. Waiting for completion..."
        
        # Wait for job to complete
        kubectl wait --for=condition=complete job/$JOB_NAME -n ${{ env.NAMESPACE }} --timeout=600s || {
          echo "Job did not complete within timeout. Checking status..."
          kubectl describe job/$JOB_NAME -n ${{ env.NAMESPACE }}
          exit 1
        }
        
        # Show logs
        echo ""
        echo "Transformation logs:"
        echo "==================="
        kubectl logs job/$JOB_NAME -n ${{ env.NAMESPACE }}
        
        # Show job status
        echo ""
        echo "Job status:"
        kubectl get job/$JOB_NAME -n ${{ env.NAMESPACE }}
        
        # Cleanup job
        kubectl delete job/$JOB_NAME -n ${{ env.NAMESPACE }}
        
        echo ""
        echo "Transformation completed!"
        echo "To view transformed data, connect to PostgreSQL and query the dbt_transforms schema"

    - name: Teardown dbt deployment
      if: github.event.inputs.action == 'teardown'
      run: |
        echo "Tearing down dbt deployment..."
        
        # Delete all resources in dbt namespace
        kubectl delete all --all -n ${{ env.NAMESPACE }} || true
        
        # Delete ConfigMaps
        kubectl delete configmap --all -n ${{ env.NAMESPACE }} || true
        
        # Delete Secrets
        kubectl delete secret --all -n ${{ env.NAMESPACE }} || true
        
        # Delete namespace
        kubectl delete namespace ${{ env.NAMESPACE }} || true
        
        echo "dbt teardown completed!"